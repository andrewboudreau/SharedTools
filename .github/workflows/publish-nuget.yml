name: Publish NuGet Packages

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
        contents: write
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
    
    # Extract version number from tag (assuming tags like v9.0.1)
    - name: Extract version from tag
      id: extract_version
      run: |
        # Remove the "refs/tags/" prefix and then the "v" prefix.
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag is: $TAG, version is: $VERSION"
    
    # Update version in csproj files
    - name: Update csproj version
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        echo "Updating csproj files to version $VERSION"
        
        # Use sed to update the Version tag in csproj files
        sed -i "s/<Version>[0-9]\+\.[0-9]\+\.[0-9]\+\(<.*\)\?<\/Version>/<Version>$VERSION<\/Version>/g" SharedTools.Web/SharedTools.Web.csproj
        sed -i "s/<Version>[0-9]\+\.[0-9]\+\.[0-9]\+\(<.*\)\?<\/Version>/<Version>$VERSION<\/Version>/g" SharedTools.Tests/SharedTools.Tests.csproj
        
        # Verify the changes
        echo "Updated versions:"
        grep -o "<Version>.*</Version>" SharedTools.Web/SharedTools.Web.csproj
        grep -o "<Version>.*</Version>" SharedTools.Tests/SharedTools.Tests.csproj
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release
    
    - name: Pack SharedTools.Web
      run: dotnet pack SharedTools.Web/SharedTools.Web.csproj --configuration Release --no-build --output nuget-packages
    
    - name: Pack SharedTools.Tests
      run: dotnet pack SharedTools.Tests/SharedTools.Tests.csproj --configuration Release --no-build --output nuget-packages
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        release_name: Release v${{ steps.extract_version.outputs.version }}
        draft: false
        prerelease: false
    
    - name: Publish package to NuGet
      if: github.ref_type == 'tag'
      run: |
        dotnet nuget push "./nuget-packages/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      
    # Upload the NuGet package as a release asset using the version number
    - name: Upload Web NuGet Package as Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nuget-packages/SharedTools.Web.${{ steps.extract_version.outputs.version }}.nupkg
        asset_name: SharedTools.Web.${{ steps.extract_version.outputs.version }}.nupkg
        asset_content_type: application/octet-stream
    
    - name: Upload Tests NuGet Package as Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nuget-packages/SharedTools.Tests.${{ steps.extract_version.outputs.version }}.nupkg
        asset_name: SharedTools.Tests.${{ steps.extract_version.outputs.version }}.nupkg
        asset_content_type: application/octet-stream
