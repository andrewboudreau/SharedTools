name: Publish NuGet Packages

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release
    
    - name: Pack SharedTools.Web
      run: dotnet pack SharedTools.Web/SharedTools.Web.csproj --configuration Release --no-build --output nuget-packages
    
    - name: Pack SharedTools.Tests
      run: dotnet pack SharedTools.Tests/SharedTools.Tests.csproj --configuration Release --no-build --output nuget-packages
    
    # Extract version number from tag (assuming tags like v9.0.1)
    - name: Extract version from tag
      id: extract_version
      run: |
        # Remove the "refs/tags/" prefix and then the "v" prefix.
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag is: $TAG, version is: $VERSION"

    - name: Ensure csproj version matches tag version
      run: |
        # Extract the version from the tag (assuming tag is formatted as "v9.0.1")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
          
        # Extract the Version property from the csproj file using grep & sed (adjust the file name if needed)
        CSPROJ_VERSION=$(grep -oP '(?<=<Version>)[^<]+' ./SharedTools.Tests/SharedTools.Tests.csproj)
        echo "csproj version: $CSPROJ_VERSION"
    
        if [ "$TAG_VERSION" != "$CSPROJ_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match csproj version ($CSPROJ_VERSION)."
            exit 1
        fi

    - name: Ensure csproj version matches tag version
      run: |
        # Extract the version from the tag (assuming tag is formatted as "v9.0.1")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
          
        # Extract the Version property from the csproj file using grep & sed (adjust the file name if needed)
        CSPROJ_VERSION=$(grep -oP '(?<=<Version>)[^<]+' ./SharedTools.Web/SharedTools.Web.csproj)
        echo "csproj version: $CSPROJ_VERSION"
    
        if [ "$TAG_VERSION" != "$CSPROJ_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match csproj version ($CSPROJ_VERSION)."
            exit 1
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        release_name: Release v${{ steps.extract_version.outputs.version }}
        draft: false
        prerelease: false
    
    - name: Publish package to NuGet
      if: github.ref_type == 'tag'
      run: |
        dotnet nuget push "./artifacts/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      
    # Upload the NuGet package as a release asset using the version number if needed.
    - name: Upload NuGet Package as Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/BackgroundTimerJob.${{ steps.extract_version.outputs.version }}.nupkg
        asset_name: BackgroundTimerJob.${{ steps.extract_version.outputs.version }}.nupkg
        asset_content_type: application/octet-stream

    - name: Push to NuGet
      run: dotnet nuget push nuget-packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json